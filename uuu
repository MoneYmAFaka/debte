-- Load Arrayfield UI library with error handling and retries
local function loadArrayfield(maxRetries, delay)
    local arrayfieldUrl = "https://raw.githubusercontent.com/UI-Interface/CustomFIeld/main/RayField.lua"
    local attempt = 1
    local success, result

    while attempt <= maxRetries do
        success, result = pcall(function()
            return game:HttpGet(arrayfieldUrl)
        end)
        if success then
            local loaded, Arrayfield = pcall(loadstring(result))
            if loaded and Arrayfield then
                print("Arrayfield UI library loaded successfully on attempt " .. attempt)
                return true, Arrayfield
            else
                warn("Failed to execute Arrayfield script on attempt " .. attempt .. ": " .. tostring(Arrayfield))
            end
        else
            warn("Failed to fetch Arrayfield UI library on attempt " .. attempt .. ": " .. tostring(result))
        end
        task.wait(delay)
        attempt = attempt + 1
    end
    return false, "Failed to load Arrayfield UI library after " .. maxRetries .. " attempts."
end

-- Attempt to load Arrayfield with 3 retries, 2-second delay between attempts
local success, Arrayfield = loadArrayfield(3, 2)
if not success then
    warn(Arrayfield)
    return
end

-- Initialize services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer

-- Safety checks
if not LocalPlayer then
    warn("Player not found. Script aborted.")
    return
end

local Remotes = ReplicatedStorage:WaitForChild("Remotes", 10)
if not Remotes then
    warn("Remotes not found in ReplicatedStorage.")
    return
end

-- Toggle variables
local autoClaimEnabled = false
local autoRebirthEnabled = false
local autoIndexEnabled = false
local autoPotionEnabled = false
local autoInstantRollEnabled = false
local autoRankEnabled = false

-- Stop events for each feature
local autoClaimStopEvent = Instance.new("BindableEvent")
local autoRebirthStopEvent = Instance.new("BindableEvent")
local autoIndexStopEvent = Instance.new("BindableEvent")
local autoPotionStopEvent = Instance.new("BindableEvent")
local autoInstantRollStopEvent = Instance.new("BindableEvent")
local autoRankStopEvent = Instance.new("BindableEvent")

-- Randomized delay function
local function randomDelay(min, max)
    return task.wait(min + math.random() * (max - min))
end

-- Safe FireServer function
local function safeFireServer(remoteName, args, minDelay, maxDelay, stopEvent)
    local remote = Remotes:FindFirstChild(remoteName)
    if not remote then
        warn("Remote " .. remoteName .. " not found.")
        return
    end
    local connection
    connection = stopEvent.Event:Connect(function()
        connection:Disconnect()
    end)
    task.spawn(function()
        while true do
            if not _G[remoteName .. "Enabled"] or not remote:IsDescendantOf(ReplicatedStorage) then
                stopEvent:Fire()
                break
            end
            pcall(function()
                remote:FireServer(unpack(args))
            end)
            randomDelay(minDelay, maxDelay)
            if not connection.Connected then break end
        end
    end)
end

-- Auto Claim Battle Pass (every 1 minute)
local function autoClaim()
    _G["BattlepassEnabled"] = autoClaimEnabled
    task.spawn(function()
        while autoClaimEnabled do
            local remote = Remotes:FindFirstChild("Battlepass")
            if remote then
                pcall(function()
                    remote:FireServer("Claim", "All")
                end)
                print("Auto-claimed battle pass!")
            end
            task.wait(60) -- Every 1 minute
        end
    end)
end

-- Auto Rebirth
local function autoRebirth()
    _G["RebirthEnabled"] = autoRebirthEnabled
    safeFireServer("Rebirth", {}, 5, 7, autoRebirthStopEvent)
end

-- Auto Index
local function autoIndex()
    _G["ClaimIndexEnabled"] = autoIndexEnabled
    safeFireServer("ClaimIndex", {}, 5, 7, autoIndexStopEvent)
end

-- Auto Potion (no selection, just buy when toggled)
local function autoPotion()
    _G["PotionCraftEnabled"] = autoPotionEnabled
    task.spawn(function()
        while autoPotionEnabled do
            local remote = Remotes:FindFirstChild("PotionCraft")
            if remote then
                pcall(function()
                    remote:FireServer()
                end)
                print("Bought potion!")
            end
            task.wait(10) -- Adjust delay if needed
        end
    end)
end

-- Auto Instant Roll (every 15 minutes)
local function autoInstantRoll()
    _G["InstantRollEnabled"] = autoInstantRollEnabled
    task.spawn(function()
        while autoInstantRollEnabled do
            local remote = Remotes:FindFirstChild("RollEvent")
            if remote then
                pcall(function()
                    remote:FireServer("InstantBonus")
                end)
                print("Instant Bonus triggered!")
            end
            task.wait(900) -- 15 minutes (900 seconds)
        end
    end)
end

-- Auto Rank (every 1 minute)
local function autoRank()
    _G["RankedEnabled"] = autoRankEnabled
    task.spawn(function()
        while autoRankEnabled do
            local remote = Remotes:FindFirstChild("Ranked")
            if remote then
                pcall(function()
                    remote:FireServer()
                end)
                print("Auto-ranked up!")
            end
            task.wait(60) -- Every 1 minute
        end
    end)
end

-- Create UI
local Window = Arrayfield:CreateWindow({
    Name = "Auto Features Hub",
    LoadingTitle = "Loading Interface",
    LoadingSubtitle = "by xAI",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "AutoHub",
        FileName = "Config"
    }
})

-- Main Tab
local MainTab = Window:CreateTab("Main", 4483362458)
local MainSection = MainTab:CreateSection("Auto Features", false)

MainTab:CreateToggle({
    Name = "Auto Claim Battlepass",
    CurrentValue = false,
    Flag = "AutoClaim",
    Callback = function(Value)
        autoClaimEnabled = Value
        if Value then autoClaim() else autoClaimStopEvent:Fire() end
    end,
})

MainTab:CreateToggle({
    Name = "Auto Rebirth",
    CurrentValue = false,
    Flag = "AutoRebirth",
    Callback = function(Value)
        autoRebirthEnabled = Value
        if Value then autoRebirth() else autoRebirthStopEvent:Fire() end
    end,
})

MainTab:CreateToggle({
    Name = "Auto Claim Index",
    CurrentValue = false,
    Flag = "AutoIndex",
    Callback = function(Value)
        autoIndexEnabled = Value
        if Value then autoIndex() else autoIndexStopEvent:Fire() end
    end,
})

MainTab:CreateToggle({
    Name = "Auto Buy Potions",
    CurrentValue = false,
    Flag = "AutoPotion",
    Callback = function(Value)
        autoPotionEnabled = Value
        if Value then autoPotion() else autoPotionStopEvent:Fire() end
    end,
})

MainTab:CreateToggle({
    Name = "Auto Instant Roll",
    CurrentValue = false,
    Flag = "AutoInstantRoll",
    Callback = function(Value)
        autoInstantRollEnabled = Value
        if Value then autoInstantRoll() else autoInstantRollStopEvent:Fire() end
    end,
})

MainTab:CreateToggle({
    Name = "Auto Rank",
    CurrentValue = false,
    Flag = "AutoRank",
    Callback = function(Value)
        autoRankEnabled = Value
        if Value then autoRank() else autoRankStopEvent:Fire() end
    end,
})

MainTab:CreateLabel("Auto Features Loaded! All features are ready to use!", MainSection)
