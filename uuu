-- Load Arrayfield UI library with error handling
local Arrayfield
local success, result = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/UI-Interface/CustomFIeld/main/RayField.lua"))()
end)

if not success then
    warn("Failed to load Arrayfield UI library: " .. tostring(result))
    return -- Stop the script if the UI library fails to load
end
Arrayfield = success and result or nil

-- Initialize services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Safety check
if not LocalPlayer then
    warn("Player not found. Script aborted.")
    return
end

-- Toggle variables
local autoSellEnabled = false
local autoOpenEnabled = false
local antiAfkEnabled = false

-- Stop events
local autoSellStopEvent = Instance.new("BindableEvent")
local autoOpenStopEvent = Instance.new("BindableEvent")
local antiAfkStopEvent = Instance.new("BindableEvent")

-- Randomized delay function
local function randomDelay(min, max)
    return task.wait(min + math.random() * (max - min))
end

-- Safe FireServer function with no logs
local function safeFireServer(args, delayType, minDelay, maxDelay, stopEvent, toggleFlag)
    local connection
    connection = stopEvent.Event:Connect(function()
        connection:Disconnect()
    end)
    task.spawn(function()
        while true do
            if not _G[toggleFlag] then
                stopEvent:Fire()
                break
            end
            pcall(function()
                game:GetService("ReplicatedStorage"):WaitForChild("Shared", 9e9):WaitForChild("Framework", 9e9):WaitForChild("Network", 9e9):WaitForChild("Remote", 9e9):WaitForChild("Event", 9e9):FireServer(unpack(args))
            end)
            if delayType == "fixed" then
                task.wait(minDelay)
            else
                randomDelay(minDelay, maxDelay)
            end
            if not connection.Connected then break end
        end
    end)
end

-- Anti-AFK function
local function antiAfk()
    _G["AntiAfkEnabled"] = antiAfkEnabled
    local vu = game:GetService("VirtualUser")
    task.spawn(function()
        while true do
            if not _G["AntiAfkEnabled"] then
                antiAfkStopEvent:Fire()
                break
            end
            vu:CaptureController()
            vu:ClickButton2(Vector2.new())
            task.wait(30) -- Simulate activity every 30 seconds
            if not antiAfkStopEvent.Event.Connected then break end
        end
    end)
end

-- Auto Sell
local function autoSell()
    _G["SellEnabled"] = autoSellEnabled
    local args = { [1] = "Sell" }
    safeFireServer(args, "random", 5, 10, autoSellStopEvent, "SellEnabled")
end

-- Auto Open
local function autoOpen()
    _G["OpenEnabled"] = autoOpenEnabled
    local args = { [1] = "Open", [2] = "Infinity Chest" }
    safeFireServer(args, "random", 3, 6, autoOpenStopEvent, "OpenEnabled")
end

-- Create UI
local Window = Arrayfield:CreateWindow({
    Name = "Auto Features Hub",
    LoadingTitle = "Loading Interface",
    LoadingSubtitle = "by xAI",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "AutoHub",
        FileName = "Config"
    }
})

-- Fix UISizeConstraint issue
local function fixUISizeConstraints(window)
    for _, element in pairs(window:GetDescendants()) do
        if element:IsA("UISizeConstraint") then
            if element.MaxSize.X < element.MinSize.X or element.MaxSize.Y < element.MinSize.Y then
                element.MaxSize = Vector2.new(
                    math.max(element.MaxSize.X, element.MinSize.X),
                    math.max(element.MaxSize.Y, element.MinSize.Y)
                )
            end
        end
    end
end

-- Main Tab
local MainTab = Window:CreateTab("Main", 4483362458)
local MainSection = MainTab:CreateSection("Auto Features", false)

-- Auto Sell Toggle
MainTab:CreateToggle({
    Name = "Auto Sell",
    Info = "Automatically sells items.",
    CurrentValue = false,
    Flag = "AutoSell",
    Callback = function(Value)
        autoSellEnabled = Value
        if Value then
            autoSell()
        else
            autoSellStopEvent:Fire()
        end
    end,
})

-- Auto Open Toggle
MainTab:CreateToggle({
    Name = "Auto Open Infinity Chest",
    Info = "Automatically opens Infinity Chests.",
    CurrentValue = false,
    Flag = "AutoOpen",
    Callback = function(Value)
        autoOpenEnabled = Value
        if Value then
            autoOpen()
        else
            autoOpenStopEvent:Fire()
        end
    end,
})

-- Anti-AFK Toggle
MainTab:CreateToggle({
    Name = "Anti-AFK",
    Info = "Prevents AFK kick by simulating activity.",
    CurrentValue = false,
    Flag = "AntiAfk",
    Callback = function(Value)
        antiAfkEnabled = Value
        if Value then
            antiAfk()
        else
            antiAfkStopEvent:Fire()
        end
    end,
})

-- Settings Tab
local SettingsTab = Window:CreateTab("Settings", 4483362458)
local SettingsSection = SettingsTab:CreateSection("UI Settings", false)

-- Close Keybind (Default E)
local closeKey = Enum.KeyCode.E
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == closeKey then
        Window:Destroy()
    end
end)

SettingsTab:CreateInput({
    Name = "Close UI Key",
    Info = "Enter a key to close the UI (default: E).",
    PlaceholderText = "Enter Key",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        local key = Enum.KeyCode[Text:upper()]
        if key then
            closeKey = key
        end
    end,
})

-- Apply the fix after creating all UI elements
fixUISizeConstraints(Window)

-- Notification
MainTab:CreateLabel("Auto Features Loaded! All features are ready to use!", MainSection)
