-- Load Arrayfield UI library with error handling
local Arrayfield
local success, result = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/UI-Interface/CustomFIeld/main/RayField.lua"))()
end)

if not success then
    warn("Failed to load Arrayfield UI library: " .. tostring(result))
    return
end
Arrayfield = success and result or nil

-- Initialize services
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- // Auto Tap (Remotes.Click)
local autoTapEnabled = false
local autoTapDelay = 0.2 -- default 0.2s

local function autoTapLoop()
    task.spawn(function()
        while autoTapEnabled do
            pcall(function()
                local args = {}
                ReplicatedStorage:WaitForChild("Remotes", 9e9)
                    :WaitForChild("Click", 9e9)
                    :FireServer(unpack(args))
            end)
            task.wait(autoTapDelay)
        end
    end)
end

-- // Auto Upgrade (Remotes.Upgrades.Upgrade)
local autoUpgradeEnabled = false
local upgradeArgsList = {
    { "DNA", "DNA", 1 },
    { "DNA", "BaseDNA", 1 },
    { "DNA", "AutoClicker", 1 },
}

local function autoUpgradeLoop()
    task.spawn(function()
        while autoUpgradeEnabled do
            pcall(function()
                for _, args in ipairs(upgradeArgsList) do
                    ReplicatedStorage:WaitForChild("Remotes", 9e9)
                        :WaitForChild("Upgrades", 9e9)
                        :WaitForChild("Upgrade", 9e9)
                        :FireServer(unpack(args))
                    task.wait(0.1) -- small spacing so it doesnâ€™t flood
                end
            end)
            task.wait(1) -- upgrade cycle every second
        end
    end)
end

-- // Example toggles
-- You can flip these manually to start/stop loops
autoTapEnabled = true
autoTapLoop()

autoUpgradeEnabled = true
autoUpgradeLoop()
