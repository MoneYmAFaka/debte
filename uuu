-- Load Arrayfield UI library with error handling and retries
local function loadArrayfield(maxRetries, delay)
    local arrayfieldUrl = "https://raw.githubusercontent.com/UI-Interface/CustomFIeld/main/RayField.lua"
    local attempt = 1
    local success, result

    while attempt <= maxRetries do
        success, result = pcall(function()
            return game:HttpGet(arrayfieldUrl)
        end)
        if success then
            local loaded, Arrayfield = pcall(loadstring(result))
            if loaded and Arrayfield then
                print("Arrayfield UI library loaded successfully on attempt " .. attempt)
                return true, Arrayfield
            else
                warn("Failed to execute Arrayfield script on attempt " .. attempt .. ": " .. tostring(Arrayfield))
            end
        else
            warn("Failed to fetch Arrayfield UI library on attempt " .. attempt .. ": " .. tostring(result))
        end
        task.wait(delay)
        attempt = attempt + 1
    end
    return false, "Failed to load Arrayfield UI library after " .. maxRetries .. " attempts."
end

-- Attempt to load Arrayfield with 3 retries, 2-second delay between attempts
local success, Arrayfield = loadArrayfield(3, 2)
if not success then
    warn(Arrayfield)
    return
end

-- Initialize services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Safety check
if not LocalPlayer then
    warn("Player not found. Script aborted.")
    return
end

local Remotes = ReplicatedStorage:WaitForChild("Remotes", 10)
if not Remotes then
    warn("Remotes not found in ReplicatedStorage.")
    return
end

-- Toggle variables
local autoClaimEnabled = false
local instantRollEnabled = false
local autoRankEnabled = false

-- Function to safely fire server events
local function safeFireServer(remoteName, args)
    local remote = Remotes:FindFirstChild(remoteName)
    if not remote then
        warn("Remote " .. remoteName .. " not found.")
        return
    end
    pcall(function()
        remote:FireServer(unpack(args))
    end)
end

-- Auto Claim Battlepass (every 1 minute)
task.spawn(function()
    while true do
        if autoClaimEnabled then
            safeFireServer("Battlepass", { "Claim", "All" })
        end
        task.wait(60) -- Wait 1 minute
    end
end)

-- Instant Roll (every 20 minutes)
task.spawn(function()
    while true do
        if instantRollEnabled then
            safeFireServer("RollEvent", { "InstantBonus" })
        end
        task.wait(1200) -- Wait 20 minutes
    end
end)

-- Auto Rank (every 1 minute)
task.spawn(function()
    while true do
        if autoRankEnabled then
            safeFireServer("Ranked", {})
        end
        task.wait(60) -- Wait 1 minute
    end
end)

-- Create UI
local Window = Arrayfield:CreateWindow({
    Name = "Auto Features Hub",
    LoadingTitle = "Loading Interface",
    LoadingSubtitle = "by xAI",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "AutoHub",
        FileName = "Config"
    }
})

-- Main Tab
local MainTab = Window:CreateTab("Main", 4483362458)
local MainSection = MainTab:CreateSection("Auto Features", false)

-- Auto Claim Battlepass Toggle
MainTab:CreateToggle({
    Name = "Auto Claim Battlepass",
    Info = "Automatically claims the battle pass every minute.",
    CurrentValue = false,
    Flag = "AutoClaim",
    Callback = function(Value)
        autoClaimEnabled = Value
    end,
})

-- Instant Roll Toggle
MainTab:CreateToggle({
    Name = "Instant Roll (20 min)",
    Info = "Automatically triggers the Instant Bonus roll every 20 minutes.",
    CurrentValue = false,
    Flag = "InstantRoll",
    Callback = function(Value)
        instantRollEnabled = Value
    end,
})

-- Auto Rank Toggle
MainTab:CreateToggle({
    Name = "Auto Rank (1 min)",
    Info = "Automatically ranks up every minute.",
    CurrentValue = false,
    Flag = "AutoRank",
    Callback = function(Value)
        autoRankEnabled = Value
    end,
})

-- Settings Tab
local SettingsTab = Window:CreateTab("Settings", 4483362458)
local SettingsSection = SettingsTab:CreateSection("UI Settings", false)

-- Close UI Keybind
SettingsTab:CreateInput({
    Name = "Close UI Key",
    Info = "Enter a key to close the UI (e.g., Q).",
    PlaceholderText = "Enter Key",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        local key = Enum.KeyCode[Text:upper()]
        if key then
            game:GetService("UserInputService").InputBegan:Connect(function(input)
                if input.KeyCode == key then
                    Window:Destroy()
                    print("UI closed with key: " .. Text)
                end
            end)
        else
            warn("Invalid key entered: " .. Text)
        end
    end,
})

-- Notification Label
MainTab:CreateLabel("Auto Features Loaded! All features are ready to use!", MainSection)
