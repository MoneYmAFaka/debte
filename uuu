-- Load Arrayfield UI library with error handling and retries
local function loadArrayfield(maxRetries, delay)
    local arrayfieldUrl = "https://raw.githubusercontent.com/UI-Interface/CustomFIeld/main/RayField.lua"
    local attempt = 1
    local success, result

    while attempt <= maxRetries do
        success, result = pcall(function()
            return game:HttpGet(arrayfieldUrl)
        end)
        if success then
            local loaded, Arrayfield = pcall(loadstring(result))
            if loaded and Arrayfield then
                print("Arrayfield UI library loaded successfully on attempt " .. attempt)
                return true, Arrayfield
            else
                warn("Failed to execute Arrayfield script on attempt " .. attempt .. ": " .. tostring(Arrayfield))
            end
        else
            warn("Failed to fetch Arrayfield UI library on attempt " .. attempt .. ": " .. tostring(result))
        end
        task.wait(delay)
        attempt = attempt + 1
    end
    return false, "Failed to load Arrayfield UI library after " .. maxRetries .. " attempts."
end

-- Attempt to load Arrayfield with 3 retries, 2-second delay between attempts
local success, Arrayfield = loadArrayfield(3, 2)
if not success then
    warn(Arrayfield)
    return
end

-- Initialize services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer

-- Safety checks
if not LocalPlayer then
    warn("Player not found. Script aborted.")
    return
end

local Remotes = ReplicatedStorage:WaitForChild("Remotes", 10)
if not Remotes then
    warn("Remotes not found in ReplicatedStorage.")
    return
end

-- Toggle variables
local autoClaimEnabled = false
local autoRebirthEnabled = false
local autoIndexEnabled = false
local autoPotionEnabled = false
local selectedPotion = "Lucky Potion II"
local potionAmount = 1

-- Stop events for each feature
local autoClaimStopEvent = Instance.new("BindableEvent")
local autoRebirthStopEvent = Instance.new("BindableEvent")
local autoIndexStopEvent = Instance.new("BindableEvent")
local autoPotionStopEvent = Instance.new("BindableEvent")

-- Randomized delay function to mimic human behavior
local function randomDelay(min, max)
    return task.wait(min + math.random() * (max - min))
end

-- Safe FireServer with existence check and stop event
local function safeFireServer(remoteName, args, minDelay, maxDelay, stopEvent)
    local remote = Remotes:FindFirstChild(remoteName)
    if not remote then
        warn("Remote " .. remoteName .. " not found.")
        return
    end
    local connection
    connection = stopEvent.Event:Connect(function()
        connection:Disconnect() -- Stop listening for the event
    end)
    task.spawn(function()
        while true do
            if not _G[remoteName .. "Enabled"] or not remote:IsDescendantOf(ReplicatedStorage) then
                stopEvent:Fire() -- Signal the loop to stop
                break
            end
            pcall(function()
                remote:FireServer(unpack(args))
            end)
            randomDelay(minDelay, maxDelay)
            if not connection.Connected then break end -- Stop if the event was fired
        end
    end)
end

-- Auto Claim
local function autoClaim()
    _G["BattlepassEnabled"] = autoClaimEnabled
    safeFireServer("Battlepass", { [1] = "Claim", [2] = "All" }, 5, 7, autoClaimStopEvent)
end

-- Auto Rebirth
local function autoRebirth()
    _G["RebirthEnabled"] = autoRebirthEnabled
    safeFireServer("Rebirth", {}, 5, 7, autoRebirthStopEvent)
end

-- Auto Index
local function autoIndex()
    _G["ClaimIndexEnabled"] = autoIndexEnabled
    safeFireServer("ClaimIndex", {}, 5, 7, autoIndexStopEvent)
end

-- Auto Potion
local function autoPotion()
    _G["PotionCraftEnabled"] = autoPotionEnabled
    safeFireServer("PotionCraft", { [1] = selectedPotion, [2] = false, [3] = potionAmount }, 10, 15, autoPotionStopEvent)
end

-- Create UI
local Window = Arrayfield:CreateWindow({
    Name = "Auto Features Hub",
    LoadingTitle = "Loading Interface",
    LoadingSubtitle = "by xAI",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "AutoHub",
        FileName = "Config"
    }
})

-- Fix UISizeConstraint issue
local function fixUISizeConstraints(window)
    for _, element in pairs(window:GetDescendants()) do
        if element:IsA("UISizeConstraint") then
            if element.MaxSize.X < element.MinSize.X or element.MaxSize.Y < element.MinSize.Y then
                element.MaxSize = Vector2.new(
                    math.max(element.MaxSize.X, element.MinSize.X),
                    math.max(element.MaxSize.Y, element.MinSize.Y)
                )
            end
        end
    end
end

-- Main Tab
local MainTab = Window:CreateTab("Main", 4483362458)
local MainSection = MainTab:CreateSection("Auto Features", false)

-- Auto Claim Toggle
MainTab:CreateToggle({
    Name = "Auto Claim Battlepass",
    Info = "Automatically claims the battle pass when available.",
    CurrentValue = false,
    Flag = "AutoClaim",
    Callback = function(Value)
        autoClaimEnabled = Value
        if Value then
            autoClaim()
        else
            autoClaimStopEvent:Fire() -- Stop the loop
        end
    end,
})

-- Auto Rebirth Toggle
MainTab:CreateToggle({
    Name = "Auto Rebirth",
    Info = "Automatically rebirths when available.",
    CurrentValue = false,
    Flag = "AutoRebirth",
    Callback = function(Value)
        autoRebirthEnabled = Value
        if Value then
            autoRebirth()
        else
            autoRebirthStopEvent:Fire()
        end
    end,
})

-- Auto Index Toggle
MainTab:CreateToggle({
    Name = "Auto Claim Index",
    Info = "Automatically claims index when available.",
    CurrentValue = false,
    Flag = "AutoIndex",
    Callback = function(Value)
        autoIndexEnabled = Value
        if Value then
            autoIndex()
        else
            autoIndexStopEvent:Fire()
        end
    end,
})

-- Auto Potion Toggle
MainTab:CreateToggle({
    Name = "Auto Buy Potion",
    Info = "Automatically buys the selected potion.",
    CurrentValue = false,
    Flag = "AutoPotion",
    Callback = function(Value)
        autoPotionEnabled = Value
        if Value then
            autoPotion()
        else
            autoPotionStopEvent:Fire()
        end
    end,
})

-- Potion Selection Dropdown
MainTab:CreateDropdown({
    Name = "Select Potion",
    Options = {"Lucky Potion II", "Speed Potion II"},
    CurrentOption = "Lucky Potion II",
    MultiSelection = false,
    Flag = "PotionType",
    Callback = function(Option)
        selectedPotion = Option
    end,
})

-- Potion Amount Slider
MainTab:CreateSlider({
    Name = "Potion Amount",
    Info = "Set the number of potions to buy.",
    Range = {1, 5},
    Increment = 1,
    Suffix = "Potions",
    CurrentValue = 1,
    Flag = "PotionAmount",
    Callback = function(Value)
        potionAmount = Value
    end,
})

-- Settings Tab
local SettingsTab = Window:CreateTab("Settings", 4483362458)
local SettingsSection = SettingsTab:CreateSection("UI Settings", false)

-- Close Keybind
SettingsTab:CreateInput({
    Name = "Close UI Key",
    Info = "Enter a key to close the UI (e.g., Q).",
    PlaceholderText = "Enter Key",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        local key = Enum.KeyCode[Text:upper()]
        if key then
            UserInputService.InputBegan:Connect(function(input)
                if input.KeyCode == key then
                    Window:Destroy()
                    print("UI closed with key: " .. Text)
                end
            end)
        else
            warn("Invalid key entered: " .. Text)
        end
    end,
})

-- Apply the fix after creating all UI elements
fixUISizeConstraints(Window)

-- Notification (Arrayfield doesn't have a Notify function, so we'll use a label instead)
MainTab:CreateLabel("Auto Features Loaded! All features are ready to use!", MainSection)
