-- Load Rayfield UI library with error handling and retries
local function loadRayfield(maxRetries, delay)
    local rayfieldUrl = "https://raw.githubusercontent.com/UI-Interface/Rayfield/main/source"
    local attempt = 1
    local success, result

    while attempt <= maxRetries do
        success, result = pcall(function()
            return game:HttpGet(rayfieldUrl)
        end)
        if success then
            local loaded, Rayfield = pcall(loadstring(result))
            if loaded and Rayfield then
                print("Rayfield UI library loaded successfully on attempt " .. attempt)
                return true, Rayfield
            else
                warn("Failed to execute Rayfield script on attempt " .. attempt .. ": " .. tostring(Rayfield))
            end
        else
            warn("Failed to fetch Rayfield UI library on attempt " .. attempt .. ": " .. tostring(result))
        end
        task.wait(delay)
        attempt = attempt + 1
    end
    return false, "Failed to load Rayfield UI library after " .. maxRetries .. " attempts."
end

-- Attempt to load Rayfield with 3 retries, 2-second delay between attempts
local success, Rayfield = loadRayfield(3, 2)
if not success then
    warn(Rayfield)
    return
end

-- Initialize services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer

-- Safety checks
if not LocalPlayer then
    warn("Player not found. Script aborted.")
    return
end

local Remotes = ReplicatedStorage:WaitForChild("Remotes", 10)
if not Remotes then
    warn("Remotes not found in ReplicatedStorage.")
    return
end

-- Toggle variables
local autoClaimEnabled = false
local autoRebirthEnabled = false
local autoIndexEnabled = false
local autoPotionEnabled = false
local selectedPotion = "Lucky Potion II"
local potionAmount = 1

-- Randomized delay function to mimic human behavior
local function randomDelay(min, max)
    return task.wait(min + math.random() * (max - min))
end

-- Safe FireServer with existence check
local function safeFireServer(remoteName, args, minDelay, maxDelay)
    local remote = Remotes:FindFirstChild(remoteName)
    if not remote then
        warn("Remote " .. remoteName .. " not found.")
        return
    end
    task.spawn(function()
        while true do
            if not _G[remoteName .. "Enabled"] or not remote:IsDescendantOf(ReplicatedStorage) then break end
            pcall(function()
                remote:FireServer(unpack(args))
            end)
            randomDelay(minDelay, maxDelay)
        end
    end)
end

-- Auto Claim
local function autoClaim()
    _G["BattlepassEnabled"] = autoClaimEnabled
    safeFireServer("Battlepass", { [1] = "Claim", [2] = "All" }, 5, 7)
end

-- Auto Rebirth
local function autoRebirth()
    _G["RebirthEnabled"] = autoRebirthEnabled
    safeFireServer("Rebirth", {}, 5, 7)
end

-- Auto Index
local function autoIndex()
    _G["ClaimIndexEnabled"] = autoIndexEnabled
    safeFireServer("ClaimIndex", {}, 5, 7)
end

-- Auto Potion
local function autoPotion()
    _G["PotionCraftEnabled"] = autoPotionEnabled
    safeFireServer("PotionCraft", { [1] = selectedPotion, [2] = false, [3] = potionAmount }, 10, 15)
end

-- Create UI
local Window = Rayfield:CreateWindow({
    Name = "Auto Features Hub",
    LoadingTitle = "Loading Interface",
    LoadingSubtitle = "by xAI",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "AutoHub",
        FileName = "Config"
    }
})

-- Main Tab
local MainTab = Window:CreateTab("Main", 4483362458)
MainTab:CreateSection("Auto Features")

-- Auto Claim Toggle
MainTab:CreateToggle({
    Name = "Auto Claim Battlepass",
    CurrentValue = false,
    Flag = "AutoClaim",
    Callback = function(Value)
        autoClaimEnabled = Value
        if Value then autoClaim() end
    end
})

-- Auto Rebirth Toggle
MainTab:CreateToggle({
    Name = "Auto Rebirth",
    CurrentValue = false,
    Flag = "AutoRebirth",
    Callback = function(Value)
        autoRebirthEnabled = Value
        if Value then autoRebirth() end
    end
})

-- Auto Index Toggle
MainTab:CreateToggle({
    Name = "Auto Claim Index",
    CurrentValue = false,
    Flag = "AutoIndex",
    Callback = function(Value)
        autoIndexEnabled = Value
        if Value then autoIndex() end
    end
})

-- Auto Potion Toggle
MainTab:CreateToggle({
    Name = "Auto Buy Potion",
    CurrentValue = false,
    Flag = "AutoPotion",
    Callback = function(Value)
        autoPotionEnabled = Value
        if Value then autoPotion() end
    end
})

-- Potion Selection Dropdown
MainTab:CreateDropdown({
    Name = "Select Potion",
    Options = {"Lucky Potion II", "Speed Potion II"},
    CurrentOption = "Lucky Potion II",
    Flag = "PotionType",
    Callback = function(Option)
        selectedPotion = Option
    end
})

-- Potion Amount Slider
MainTab:CreateSlider({
    Name = "Potion Amount",
    Range = {1, 5},
    Increment = 1,
    Suffix = "Potions",
    CurrentValue = 1,
    Flag = "PotionAmount",
    Callback = function(Value)
        potionAmount = Value
    end
})

-- Settings Tab
local SettingsTab = Window:CreateTab("Settings", 4483362458)
SettingsTab:CreateSection("UI Settings")

-- Close Keybind
SettingsTab:CreateInput({
    Name = "Close UI Key",
    PlaceholderText = "Enter Key (e.g., Q)",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        local key = Enum.KeyCode[Text:upper()]
        if key then
            UserInputService.InputBegan:Connect(function(input)
                if input.KeyCode == key then
                    Rayfield:Destroy()
                end
            end)
        end
    end
})

-- Notification
Rayfield:Notify({
    Title = "Auto Features Loaded",
    Content = "All features are ready to use!",
    Duration = 5,
    Image = 4483362458,
    Actions = {
        Ignore = {
            Name = "OK",
            Callback = function() end
        }
    }
})
